# Task ID: 11
# Title: Create Configuration and Setup System
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Develop a configuration system to manage paths, settings, and user preferences for the integration system.
# Details:
This task involves:
1. Create configuration file structure and format
2. Implement settings validation and default values
3. Develop path management for Obsidian and CV repository
4. Build user preference handling
5. Implement configuration persistence

Implementation approach:
```python
class ConfigManager:
    DEFAULT_CONFIG = {
        'obsidian_path': os.path.expanduser('~/Documents/Obsidian/Goals/Career'),
        'cv_repo_path': os.path.expanduser('~/repos/cv'),
        'cv_file': 'cv_1023.tex',
        'git_branch': 'cv_rework_2025',
        'update_interval': 3600,  # Check for updates every hour
        'backup_enabled': True,
        'backup_location': 'backups',
        'logging_level': 'INFO'
    }
    
    def __init__(self, config_file='config.json'):
        self.config_file = config_file
        self.config = self.load_config()
    
    def load_config(self):
        # Load configuration from file or use defaults
        try:
            with open(self.config_file, 'r') as f:
                config = json.load(f)
                return self.validate_config(config)
        except (FileNotFoundError, json.JSONDecodeError):
            # Create default config
            self.save_config(self.DEFAULT_CONFIG)
            return self.DEFAULT_CONFIG
    
    def validate_config(self, config):
        # Ensure all required settings are present
        validated = self.DEFAULT_CONFIG.copy()
        for key, value in config.items():
            if key in validated:
                validated[key] = value
        
        # Validate paths
        for path_key in ['obsidian_path', 'cv_repo_path']:
            if not os.path.exists(validated[path_key]):
                raise ValueError(f"Path not found: {validated[path_key]}")
        
        return validated
    
    def save_config(self, config=None):
        # Save configuration to file
        if config is None:
            config = self.config
            
        with open(self.config_file, 'w') as f:
            json.dump(config, f, indent=2)
    
    def update_setting(self, key, value):
        # Update a specific setting
        if key not in self.config:
            raise ValueError(f"Unknown configuration key: {key}")
            
        self.config[key] = value
        self.save_config()
    
    def setup_wizard(self):
        # Interactive setup to configure the system
        print("CV Integration System Setup")
        
        # Get Obsidian path
        default_obsidian = self.DEFAULT_CONFIG['obsidian_path']
        obsidian_path = input(f"Obsidian career folder path [{default_obsidian}]: ") or default_obsidian
        
        # Get CV repository path
        default_cv_repo = self.DEFAULT_CONFIG['cv_repo_path']
        cv_repo_path = input(f"CV repository path [{default_cv_repo}]: ") or default_cv_repo
        
        # Get CV file name
        default_cv_file = self.DEFAULT_CONFIG['cv_file']
        cv_file = input(f"CV LaTeX file name [{default_cv_file}]: ") or default_cv_file
        
        # Create and save configuration
        config = self.DEFAULT_CONFIG.copy()
        config.update({
            'obsidian_path': obsidian_path,
            'cv_repo_path': cv_repo_path,
            'cv_file': cv_file
        })
        
        try:
            validated_config = self.validate_config(config)
            self.config = validated_config
            self.save_config()
            print("Configuration saved successfully.")
            return True
        except ValueError as e:
            print(f"Error: {str(e)}")
            return False
```

# Test Strategy:
1. Unit tests for configuration loading and validation
2. Test default configuration generation
3. Verify path validation with various scenarios
4. Test configuration persistence
5. Validate setup wizard functionality
6. Test error handling with invalid configurations
7. Integration tests with system components using configuration
