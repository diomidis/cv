# Task ID: 6
# Title: Implement Change Detection and Monitoring
# Status: pending
# Dependencies: 2, 5
# Priority: medium
# Description: Create a system to detect relevant changes in Obsidian career notes that should trigger CV updates.
# Details:
This task involves:
1. Implement file monitoring for relevant Obsidian files
2. Create change detection logic to identify significant updates
3. Build relevance filtering to focus on CV-related changes
4. Develop notification system for detected changes
5. Implement change categorization by CV section

Implementation approach:
```python
class ChangeMonitor:
    def __init__(self, obsidian_reader, content_mapper):
        self.obsidian_reader = obsidian_reader
        self.content_mapper = content_mapper
        self.last_check = {}
    
    def initialize_monitoring(self):
        # Record initial state of all relevant files
        for section, rule in self.content_mapper.mapping_rules.items():
            path = rule['obsidian_path']
            self.last_check[path] = {
                'content': self.obsidian_reader.read_file(path),
                'timestamp': time.time()
            }
    
    def check_for_changes(self):
        changes = []
        for section, rule in self.content_mapper.mapping_rules.items():
            path = rule['obsidian_path']
            current_content = self.obsidian_reader.read_file(path)
            
            if path in self.last_check and current_content != self.last_check[path]['content']:
                # Extract the relevant section content using the mapping rule
                import re
                old_match = re.search(rule['content_pattern'], self.last_check[path]['content'])
                new_match = re.search(rule['content_pattern'], current_content)
                
                if old_match and new_match and old_match.group(1) != new_match.group(1):
                    changes.append({
                        'section': section,
                        'path': path,
                        'old_content': old_match.group(1),
                        'new_content': new_match.group(1)
                    })
            
            # Update last check
            self.last_check[path] = {
                'content': current_content,
                'timestamp': time.time()
            }
        
        return changes
    
    def categorize_changes(self, changes):
        # Group changes by CV section
        categorized = {}
        for change in changes:
            if change['section'] not in categorized:
                categorized[change['section']] = []
            categorized[change['section']].append(change)
        return categorized
```

# Test Strategy:
1. Unit tests for change detection with modified files
2. Test relevance filtering with various content changes
3. Verify change categorization by CV section
4. Test with simultaneous changes to multiple files
5. Performance testing with large files and frequent changes
6. Integration tests with actual Obsidian vault structure
